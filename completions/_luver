#compdef luver

__luver_caching_policy() {
  local -a oldp
  oldp=( "${1}"(Nmh+12) ) # 12 hours
  (( ${#oldp} ))
}

__luver_tools() {
  local -a _luver_tools
  _luver_tools=("lua" "luajit" "luarocks")
  _describe -t tools "tools" _luver_tools
}

__luver_install_versions() {
  integer ret=1

  if ! zstyle -t ":completion:${curcontext%:*}:" cache-policy; then
    zstyle ":completion:${curcontext%:*}:" cache-policy __luver_caching_policy
  fi

  if ! zstyle -t ":completion:${curcontext%:*:*}:*:versions" sort; then
    zstyle ":completion:${curcontext%:*:*}:*:versions" sort reverse
  fi

  case "${words[2]}" in
    lua)
      local cachename="_luver_lua_versions"

      if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid "${cachename#_}" ) \
        && ! _retrieve_cache "${cachename#_}"; then
          _message "fetching lua versions..."
          _luver_lua_versions=( $(luver list-remote lua) )
          _store_cache ${cachename#_} _luver_lua_versions
      fi

      _describe -t versions "${words[2]} versions" _luver_lua_versions \
         && ret=0
      ;;

    luajit)
      local -a _luver_luajit_versions
      _luver_luajit_versions=( $(luver list-remote luajit) )

      _describe -t versions "${words[2]} versions" _luver_luajit_versions \
         && ret=0
      ;;

    luarocks)
      local cachename="_luver_luarocks_versions"

      if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid "${cachename#_}" ) \
        && ! _retrieve_cache "${cachename#_}"; then
          _message "fetching luarocks versions..."
          _luver_luarocks_versions=( $(luver list-remote luarocks) )
          _store_cache ${cachename#_} _luver_luarocks_versions
      fi

      _describe -t versions "${words[2]} versions" _luver_luarocks_versions \
         && ret=0
      ;;
  esac

  return ret
}

__luver_arguments() {
  integer ret=1

  case "${words[1]}" in
    alias)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->version' \
        '2: :->alias' \
        && ret=0

      case "${state}" in
        version)
          local -a versions
          versions=("${LUVER_DIR}/lua-versions"/*(N:t))

          _describe -t versions "lua versions" versions \
             && ret=0
          ;;
        alias)
          _message "Enter alias name for lua v${words[2]}" && ret=0
          ;;
      esac
      ;;

    completion)
      _arguments \
        '1: :->shell' \
        && ret=0

      case "${state}" in
        shell)
          local -a shells
          shells=("zsh")

          _describe -t luver-completion-shells "shells" shells \
             && ret=0
          ;;
      esac
      ;;

    current)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->tool' \
        && ret=0

      case "${state}" in
        tool)
          __luver_tools && ret=0
          ;;
      esac
      ;;

    help)
      local curcontext="${curcontext}" state

      _arguments \
        '1:: :->command' \
        && ret=0

      case "${state}" in
        command)
          local -a commands
          commands=($(luver help | sed '1,/COMMANDS:/d' | sed '/^$/,$d' | sed 's/^  //' | cut -d' ' -f1))

          _describe -t luver-help-commands "commands" commands \
            && ret=0
          ;;
      esac
      ;;

    install)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->tool' \
        '2: :->version' \
        && ret=0

      case "${state}" in
        tool)
          __luver_tools && ret=0
          ;;
        version)
          curcontext="${curcontext%:*}:${words[2]}:"
          __luver_install_versions && ret=0
          ;;
      esac
      ;;

    list)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->tool' \
        && ret=0

      case "${state}" in
        tool)
          __luver_tools && ret=0
          ;;
      esac
      ;;

    list-remote)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->tool' \
        && ret=0

      case "${state}" in
        tool)
          __luver_tools && ret=0
          ;;
      esac
      ;;

    unalias)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->alias' \
        && ret=0

      case "${state}" in
        alias)
          local -a aliases
          aliases=("${LUVER_DIR}/lua-aliases"/*(N:t))

          _describe -t aliases "${words[2]} aliases" aliases \
             && ret=0
          ;;
      esac
      ;;

    uninstall)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->tool' \
        '2:: :->version' \
        && ret=0

      case "${state}" in
        tool)
          __luver_tools && ret=0
          ;;
        version)
          case "${words[2]}" in
            lua)
              local -a versions
              versions=("${LUVER_DIR}/${words[2]}-versions"/*(N:t))

              _describe -t versions "${words[2]} versions" versions \
                 && ret=0
              ;;
            luarocks)
              local -r version="$(luver current luarocks)"

              if test -z "${version}"; then
                _message "luarocks is currently not installed" && ret=0
              else
                _message "hit enter to uninstall luarocks v${version}" && ret=0
              fi
              ;;
          esac
          ;;
      esac
      ;;

    use)
      local curcontext="${curcontext}" state

      _arguments \
        '1: :->version' \
        && ret=0

      case "${state}" in
        version)
          local -a aliases
          aliases=("${LUVER_DIR}/lua-aliases"/*(N:t))

          local -a versions
          versions=("${LUVER_DIR}/lua-versions"/*(N:t) "system")

          _alternative \
            "aliases:${words[2]} aliases:compadd -a - aliases" \
            "versions:${words[2]} versions:compadd -a - versions" \
            && ret=0
          ;;
      esac
      ;;
  esac

  return ret
}

__luver_commands() {
  local -a _luver_commands
  _luver_commands=(${(f)"$(luver help | sed '1,/COMMANDS:/d' | sed '/^$/,$d' | sed 's/^  //' | sed 's/^\([^ ]*\) */\1:/g')"})

  _describe -t luver-commands "commands" _luver_commands
}

_luver() {
  setopt localoptions typesetsilent

  local context curcontext="${curcontext}" state state_descr line
  local -A opt_args
  integer ret=1

  _arguments -C \
    '1: :->command' \
    '*:: :->argument' \
    && ret=0

  case "${state}" in
    command)
      __luver_commands && ret=0
      ;;
    argument)
      curcontext="${curcontext%:*}:${words[1]}:"
      __luver_arguments && ret=0
      ;;
  esac

  return ret
}

_luver $@

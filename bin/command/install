#!/usr/bin/env bash

set -euo pipefail

source ${LUVER_SRC}/bin/command/util/fetch_archive
source ${LUVER_SRC}/bin/command/util/parse_version

function luver_get_platform_target() {
  local -r os=$(uname -s)

  if [[ "${os}" = "Darwin" ]]; then
    echo "macosx"
  elif [[ "${os}" = "Linux" ]]; then
    echo "linux"
  fi
}

function luver_install_lua() {
  local -r version="${1}"

  local major minor patch prerelease
  parse_version "${version}"

  if test "${major}" -le 2; then
    echo "Unsupported version: ${version}"
    exit 1
  fi

  local -r archive_url="https://www.lua.org/ftp/lua-${version}.tar.gz"
  local -r archive_name="$(basename "${archive_url}")"

  local -r temp_dir="$(mktemp --directory /tmp/luver-lua-${version}--XXXXXXXXX)"

  pushd "${temp_dir}"

  fetch_archive "${archive_url}"

  tar --strip-components=1 -xzf "${archive_name}"

  local -r installation_dir="${LUVER_DIR}/lua-versions/${version}/installation"

  if test "${major}" -eq 3; then
    make
    mkdir -p ${installation_dir}/{bin,include,lib,man/man1}
    cp ./bin/{lua,luac} "${installation_dir}/bin/"
    cp ./include/*.h "${installation_dir}/include/"
    cp ./lib/*.a "${installation_dir}/lib/"

    for bin in lua luac; do
      if test -f "./doc/${bin}.man"; then
        cp "./doc/${bin}.man" "${installation_dir}/man/man1/${bin}.1"
      fi
    done
  elif test "${major}" -eq 4; then
    make INSTALL_ROOT="${installation_dir}" install
  elif test "${major}" -eq 5 && test "${minor}" -eq 0; then
    make INSTALL_ROOT="${installation_dir}" install
  else
    local -r platform_target="$(luver_get_platform_target)"

    if test -z "${platform_target}"; then
      echo "Unsupported platform!"
      exit 1
    fi

    make INSTALL_TOP="${installation_dir}" "${platform_target}" install
  fi

  popd

  rm -rf "${temp_dir}"
}

function luver_install_luarocks() {
  local -r version="${1}"

  local major minor patch prerelease
  parse_version "${version}"

  local current_lua_version="$(${LUVER_SRC}/bin/command/current lua)"

  if test -z "${current_lua_version}"; then
    echo "no lua version is currently in use"
    exit 1
  fi

  local current_luarocks_version="$(${LUVER_SRC}/bin/command/current luarocks)"

  if ! test -z "${current_luarocks_version}"; then
    echo "luarocks v${current_luarocks_version} is already installed, uninstall it first."
    exit 1
  fi

  if test "${major}" -lt 3 || (test "${minor}" -eq 0 && test "${patch}" -lt 1); then
    echo "unsupported version: ${version}"
    exit 1
  fi

  local -r temp_dir="$(mktemp --directory /tmp/luver-luarocks-${version}--XXXXXXXXX)"

  pushd "${temp_dir}"

  local -r archive_url="https://luarocks.github.io/luarocks/releases/luarocks-${version}.tar.gz"
  local -r archive_name="$(basename "${archive_url}")"

  fetch_archive "${archive_url}"

  tar --strip-components=1 -xzf "${archive_name}"

  local -r installation_dir="${LUVER_DIR}/lua-versions/${current_lua_version}/installation"

  ./configure --prefix="${installation_dir}" --with-lua="${installation_dir}"
  make
  make install

  popd

  rm -rf "${temp_dir}"
}

function luver_install() {
  local tool="lua"
  if [[ " lua luarocks " = *" ${1:-} "* ]]; then
    tool="${1}"
    shift
  fi

  luver_install_${tool} $@
}

luver_install $@

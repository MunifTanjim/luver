#!/usr/bin/env bash

set -euo pipefail

source ${LUVER_SRC}/bin/command/util/extract_luajit_version
source ${LUVER_SRC}/bin/command/util/extract_luarocks_version
source ${LUVER_SRC}/bin/command/util/extract_luvi_version
source ${LUVER_SRC}/bin/command/util/extract_luvit_version
source ${LUVER_SRC}/bin/command/util/extract_lit_version

function luver_list_lua_version() {
  local tool="${1}"

  if test -d "${LUVER_DIR}/${tool}-versions"; then
    local version_dir version

    for version_dir in ${LUVER_DIR}/${tool}-versions/*; do
      version="$(basename "${version_dir}")"

      if test "${version}" = "*"; then
        continue
      fi

      echo "${version}"
    done
  fi
}

function luver_list_lua_aliasmap() {
  local -r tool="${1}"

  if test -d "${LUVER_DIR}/${tool}-aliases"; then
    local alias_dir alias version

    for alias_dir in ${LUVER_DIR}/${tool}-aliases/*; do
      alias="$(basename "${alias_dir}")"

      if test "${alias}" = "*"; then
        continue
      fi

      version="$(basename $(realpath "${alias_dir}"))"

      echo "${alias}:${version}"
    done
  fi
}

function luver_list_lua() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current lua)"

  local version
  for version in $(luver_list_lua_version lua); do
    map[${version}]=""
  done

  local aliasmap alias
  for aliasmap in $(luver_list_lua_aliasmap lua); do
    alias="$(echo ${aliasmap} | cut -d: -f1)"
    version="$(echo ${aliasmap} | cut -d: -f2)"
    map[${version}]="${map[${version}]} ${alias}"
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version}${map[${version}]}${mark}"

    mark=""
  done
}

function luver_list_luajit() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current luajit)"

  for lua_version in $(luver_list_lua_version lua); do
    local version="$(extract_luajit_version "${lua_version}")"
    if ! test -z "${version}"; then
      map[${version}]="${map[${version}]:+${map[${version}]}, }${lua_version}"
    fi
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version} [lua: ${map[${version}]}]${mark}"

    mark=""
  done
}

function luver_list_luarocks() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current luarocks)"

  for lua_version in $(luver_list_lua_version lua); do
    local version="$(extract_luarocks_version "${lua_version}")"
    if ! test -z "${version}"; then
      map[${version}]="${map[${version}]:+${map[${version}]}, }${lua_version}"
    fi
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version} [lua: ${map[${version}]}]${mark}"

    mark=""
  done
}

function luver_list_luvi() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current luvi)"

  local bin_name
  for lua_version in $(luver_list_lua_version lua); do
    local -A seen_version

    for bin_path in ${LUVER_DIR}/lua-versions/${lua_version}/installation/bin/luvi-*; do
      bin_name="$(basename "${bin_path}")"

      if test "${bin_name}" = "luvi-*"; then
        continue
      fi

      local version="$(extract_luvi_version "${lua_version}" "${bin_name}")"
      if ! test -z "${version}" && test -z "${seen_version[${version}]:-}"; then
        seen_version[${version}]="true"
        map[${version}]="${map[${version}]:+${map[${version}]}, }${lua_version}"
      fi
    done
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version} [lua: ${map[${version}]}]${mark}"

    mark=""
  done
}

function luver_list_luvit() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current luvit)"

  local bin_name
  for lua_version in $(luver_list_lua_version lua); do
    for bin_path in ${LUVER_DIR}/lua-versions/${lua_version}/installation/bin/luvit-*; do
      bin_name="$(basename "${bin_path}")"

      if test "${bin_name}" = "luvit-*"; then
        continue
      fi

      local version="$(extract_luvit_version "${lua_version}" "${bin_name}")"
      if ! test -z "${version}"; then
        map[${version}]="${map[${version}]:+${map[${version}]}, }${lua_version}"
      fi
    done
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version} [lua: ${map[${version}]}]${mark}"

    mark=""
  done
}

function luver_list_lit() {
  local -A map

  local current_version="$(${LUVER_SRC}/bin/command/current lit)"

  local bin_name
  for lua_version in $(luver_list_lua_version lua); do
    for bin_path in ${LUVER_DIR}/lua-versions/${lua_version}/installation/bin/lit-*; do
      bin_name="$(basename "${bin_path}")"

      if test "${bin_name}" = "lit-*"; then
        continue
      fi

      local version="$(extract_lit_version "${lua_version}" "${bin_name}")"
      if ! test -z "${version}"; then
        map[${version}]="${map[${version}]:+${map[${version}]}, }${lua_version}"
      fi
    done
  done

  local mark=""
  for version in $(printf '%s\n' ${!map[@]} | sort); do
    if test "${version}" = "${current_version}"; then
      mark=" *"
    fi

    echo "${version} [lua: ${map[${version}]}]${mark}"

    mark=""
  done
}

function luver_list() {
  local tool="${1:-"lua"}"
  if [[ " lua luajit luarocks luvi luvit lit " != *" ${tool} "* ]]; then
    echo "unsupported tool: ${tool}"
    exit 1
  fi

  luver_list_${tool}
}

luver_list $@
